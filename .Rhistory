t.test(len ~ supp, data = ToothGrowth)$conf
TG12 <- ToothGrowth[ToothGrowth$dose == .5 | ToothGrowth$dose == 1,]
TG13 <- ToothGrowth[ToothGrowth$dose == 1 | ToothGrowth$dose == 2,]
TG23 <- ToothGrowth[ToothGrowth$dose == .5 | ToothGrowth$dose == 2,]
t.test(len ~ dose, paired = FALSE, var.equal = FAlSE, data = TG12)
t.test(len ~ dose, data = TG12)
t.test(len ~ dose, data = TG12)$conf
t.test(len ~ dose, data = TG12)
t.test(len ~ dose, data = TG13)
t.test(len ~ dose, data = TG23)
plot(ToothGrowth)
t.test(len ~ supp, data = ToothGrowth)$conf
t.test(len ~ supp, data = ToothGrowth)
ggplot(ToothGrowth)
ggplot(x = ToothGrowth$supp, y = ToothGrowth$len)
ggplot(ToothGrowth, aes(supp, len))
t.test(len ~ supp, data = ToothGrowth) + geom_point(color="perrywinkle")
ggplot(ToothGrowth, aes(supp, len))+ geom_point(color="perrywinkle")
ggplot(ToothGrowth, aes(supp, len)) + geom_point(color="periwinkle")
ggplot(ToothGrowth, aes(supp, len)) + geom_point(color="royalblue")
ggplot(ToothGrowth, aes(does, len)) + geom_point(color="royalblue")
ggplot(ToothGrowth, aes(dose, len)) + geom_point(color="royalblue")
source('~/.active-rstudio-document')
title: "Statistical Inference Course Project: Applying T-Tests to Tooth Growth Data "
View(TG23)
View(wideCW)
?ToothGrowth
t.out <- test(len ~ supp, data = ToothGrowth)
out <- t.test(len ~ supp, data = ToothGrowth)
TG12 <- ToothGrowth[ToothGrowth$dose == .5 | ToothGrowth$dose == 1,]
ToothGrowth$supp <- as.factor(ToothGrowth$supp)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
ggplot(ToothGrowth, aes(supp, len)) + geom_point(color="royalblue")
qhist(ToothGrowth, aes(supp, len)) + geom_point(color="royalblue")
d <- melt(ToothGrowth)
ggplot(d,aes(x = value)) +
facet_wrap(~variable,scales = "free_x") +
geom_histogram()
ggplot(ToothGrowth,aes(x = value)) +
ggplot(ToothGrowth,aes(x = value)) +
facet_wrap(~variable,scales = "free_x") +
geom_histogram(
ggplot(ToothGrowth,aes(x = value)) +
facet_wrap(~variable,scales = "free_x") +
geom_histogram()
View(d)
facet_wrap(~len,scales = "free_x") +
d <- melt(ToothGrowth)
ggplot(d,aes(x = value)) +
facet_wrap(~len,scales = "free_x") +
geom_histogram()
facet_wrap(~dose,scales = "free_x") +
ggplot(d,aes(y = len)) +
facet_wrap(~dose,scales = "free_x") +
geom_histogram()
d <- melt(ToothGrowth)
ggplot(d,aes(x = value)) +
facet_wrap(~variable,scales = "free_x") +
geom_histogram()
ggplot(d,aes(x = value)) +
facet_wrap(~variable) +
geom_histogram()
?diamonds
p <- ggplot(ToothGrowth, aes(x=supp))
p <- p + geom_histogram(aes(weights=len))
p <- p + scale_fill_brewer(palette="Set3")
p <- p + facet_wrap( ~ supp, ncol=1)
ggplot(ToothGrowth, aes(x=supp)) +
geom_histogram(aes(weights=len)) +
scale_fill_brewer(palette="Set3") +
facet_wrap( ~ supp, ncol=1)
ggplot(ToothGrowth, aes(x=len)) +
geom_histogram(aes(weights=len)) +
scale_fill_brewer(palette="Set3") +
facet_wrap( ~ supp, ncol=1)
ggplot(ToothGrowth, aes(x=len)) +
geom_histogram(aes(weights=len)) +
scale_fill_brewer(palette="Set3") +
facet_wrap( ~ supp, ncol=2)
ggplot(ToothGrowth, aes(x=len)) +
geom_histogram(aes(weights=len)) +
facet_wrap( ~ supp, ncol=2)
ggplot(ToothGrowth, aes(x=len)) +
geom_histogram(aes(weights=len)) +
facet_wrap( ~ dose, ncol=3)
facet_wrap( ~ dose, ncol=1)
ggplot(ToothGrowth, aes(x=len)) +
geom_histogram(aes(weights=len)) +
facet_wrap( ~ dose, ncol=1)
ggplot(ToothGrowth, aes(x=len)) +
geom_histogram(aes(weights=len)) +
facet_wrap( ~ supp, ncol=1)
ggplot(ToothGrowth, aes(x=len)) +
geom_histogram(aes(weights=len)) +
facet_wrap( ~ dose, ncol=1)
?t.test
2*3/2.306
install.packages("tda")
install.packages("TDA")
install.packages("TDA-package")
install.packages("TDA")
logistic.map <- function(c, x, N, M){
## r: bifurcation parameter
## x: initial value
## N: number of iteration
## M: number of iteration points to be returned
z <- 1:N
z[1] <- x
for(i in c(1:(N-1))){
z[i+1] <- z[i]^2 + c + .001/z[i]^2
}
## Return the last M iterations
z[c((N-M):N)]
}
## Set scanning range for bifurcation parameter r
my.r <- seq(-.25, -.01, by=0.00001)
system.time(Orbit <- sapply(my.r, logistic.map,  x=-0.001^(.25), N=600, M=100))
##   user  system elapsed (on a 2.4GHz Core2Duo)
##   2.910   0.018   2.919
Orbit <- as.vector(Orbit)
r <- sort(rep(my.r, 101))
mypanelfn <- function(x,y,...)
{
panel.xyplot(x=x, y=y, ...)
grid.lines(c(0,1), unit(rep(.001^(.25), 2), "native")
}
crit = .001^(.25)
png(filename="./orbit.png",  width=2000, height=2000)
xyplot(Orbit ~ r, col = "black", pch = ".", cex = 1, ylim = c(-1,1), panel=function(...) {
panel.abline(h=c(crit, - crit))
panel.xyplot(...)
}, scales=list(
x=list(
at=seq(-.25,-.01, by=.01)
)))
dev.off()
libary(ggplot)
library(ggplot)
library(ggplot2)
library("ggplot2")
install.packages("ggplot2")
install.packages("lattice")
png(filename="./orbit.png",  width=2000, height=2000)
xyplot(Orbit ~ r, col = "black", pch = ".", cex = 1, ylim = c(-1,1), panel=function(...) {
panel.abline(h=c(crit, - crit))
panel.xyplot(...)
}, scales=list(
x=list(
at=seq(-.25,-.01, by=.01)
)))
dev.off()
dir()
dir()
dir()
setwd("~/Dev/R")
dir()
codings = read.csv("codings.csv")
head(codings)
codings = read.csv("codings.csv", header = FALSE)
head(codings)
len(codings[1])
length(codings[1])
length(codings[1,1])
codings[1]
length(codings[1])
nrow(codings)
codings[1,1]
codings[1,1 : 2]
codings[1,1 : 2] == codings[1, 1 : 2]
codings[1,1 : 2] == codings[1, 1 : 2]
codings[1,1 : 2] == codings[2, 1 : 2]
all(codings[1,1 : 2] == codings[2, 1 : 2])
all(codings[1,1 : 2] == codings[10, 1 : 2])
source('~/Dev/R/codings.r')
print(1)
source('~/.active-rstudio-document')
codings
head(codings)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
as.string(2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Dev/R/codings.r')
source('~/.active-rstudio-document')
codings(1, 1: 2)
codings[1, 1: 2]
toString(codings[1, 1: 2])
as.character(codings[1, 1: 2])
as.character(codings[1, 1])
codings[, 1: 5] <- as.character(codings[, 1:5])
toString(codings[1, 1: 2])
clear
clear()
codings[1, 1:2]
head(codings)
codings = read.csv("codings.csv", header = FALSE)
bob[, 1:5] <- lapply(bob[, 1:5], as.character)
codings[, 1:5] <- lapply(codings[, 1:5], as.character)
codings[1, 1:2]
toString(codings[1, 1: 2])
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Dev/R/codings.r')
source('~/Dev/R/dyn.R')
rm(list = ls())
source('~/Dev/R/dyn.R')
source('~/Dev/R/dyn.R')
source('~/Dev/R/dyn.R')
plot(x=plotable, y=rep(0, length(plotable)), pch = ".")
for (i in 1:50)
{
p <- sing(p, c, bet)
}
plotable <- points[p < 10]
plot(x=plotable, y=rep(0, length(plotable)), pch = ".")
source('~/Dev/R/dyn.R')
source('~/Dev/R/dyn.R')
source('~/Dev/R/dyn.R')
source('~/Dev/R/dyn.R')
for (i in 1:60)
source('~/Dev/R/dyn.R')
source('~/Dev/R/dyn.R')
plot(x=plotable, y=rep(0, length(plotable)), pch = 20, xlab="point")
plot(x=plotable, y=rep(0, length(plotable)), pch = 20, xlab="point", ylab="")
plotable <- points[p < 5]
plot(x=plotable, y=rep(0, length(plotable)), pch = 20, xlab="point", ylab="")
source('~/Dev/R/dyn.R')
source('~/Dev/R/dyn.R')
system.time(Orbit <- sapply(p, sing, c = c, beta = beta))
numCores <- detectCores()
system.time(Orbit <- sapply(p, sing, c = c, beta = beta))
system.time(Orbit <- sapply(p, sing, x = p, c = c, beta = beta))
?sapply
source('~/Dev/R/dyn.R')
source('~/Dev/R/dyn.R')
source('~/Dev/R/bif.R')
source('~/.active-rstudio-document')
source('~/Dev/R/bif.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
xyplot(Orbit ~ r, col = "black", pch = ".", cex = 1, ylim = c(-1,1), panel=function(...) {
panel.abline(h=c(crit, - crit))
panel.xyplot(...)
}, scales=list(
x=list(
at=seq(-.25,-.01, by=.01)
)))
library(parallel)
library(lattice)
logistic.map <- function(c, x, N, M){
## c: bifurcation parameter
## x: initial value
## N: number of iteration
## M: number of iteration points to be returned
z <- 1:N
z[1] <- x
for(i in c(1:(N-1))){
z[i+1] <- z[i]^2 + c #+ .001/z[i]^2
}
## Return the last M iterations
z[c((N-M):N)]
}
## Set scanning range for bifurcation parameter r
my.r <- seq(-2, .25, by=0.0001)
system.time(Orbit <- sapply(my.r, logistic.map,  x=.001^(1/4), N=500, M=100))
Orbit <- as.vector(Orbit)
r <- sort(rep(my.r, 101))
#plot(Orbit ~ r, pch=".", ylim=c(-5, 5))
#qplot(y = Orbit, x = r, size = 100)# + geom_point(aes(size = .001))
# png(filename="./orbit2.png",  width=1500, height=1500)
# #data.frame(x = Orbit, y = r)
# xyplot(Orbit ~ r, col = "black", pch = ".", ylim = c(-5,5))
# dev.off()
crit = .001^(.25)
png(filename="./standard.png",  width=2000, height=2000)
xyplot(Orbit ~ r, col = "black", pch = 21, cex = 1, ylim = c(-1.5,1.5), panel=function(...) {
panel.abline(h=c(crit, - crit))
panel.xyplot(...)
}, scales=list(
x=list(
at=seq(-2, .25, by=0.1)
)))
dev.off()
library(parallel)
library(lattice)
logistic.map <- function(c, x, N, M){
## c: bifurcation parameter
## x: initial value
## N: number of iteration
## M: number of iteration points to be returned
z <- 1:N
z[1] <- x
for(i in c(1:(N-1))){
z[i+1] <- z[i]^2 + c #+ .001/z[i]^2
}
## Return the last M iterations
z[c((N-M):N)]
}
## Set scanning range for bifurcation parameter r
my.r <- seq(-2, .25, by=0.0001)
system.time(Orbit <- sapply(my.r, logistic.map,  x=0#.001^(1/4)
, N=500, M=100))
Orbit <- as.vector(Orbit)
r <- sort(rep(my.r, 101))
#plot(Orbit ~ r, pch=".", ylim=c(-5, 5))
#qplot(y = Orbit, x = r, size = 100)# + geom_point(aes(size = .001))
# png(filename="./orbit2.png",  width=1500, height=1500)
# #data.frame(x = Orbit, y = r)
# xyplot(Orbit ~ r, col = "black", pch = ".", ylim = c(-5,5))
# dev.off()
crit = .001^(.25)
png(filename="./standard.png",  width=2000, height=2000)
xyplot(Orbit ~ r, col = "black", pch = ".", cex = 1, ylim = c(-2,2), panel=function(...) {
panel.abline(h=c(crit, - crit))
panel.xyplot(...)
}, scales=list(
x=list(
at=seq(-2, .25, by=0.1)
)))
dev.off()
library(parallel)
library(lattice)
logistic.map <- function(c, x, N, M){
## c: bifurcation parameter
## x: initial value
## N: number of iteration
## M: number of iteration points to be returned
z <- 1:N
z[1] <- x
for(i in c(1:(N-1))){
z[i+1] <- z[i]^2 + c + .001/z[i]^2
}
## Return the last M iterations
z[c((N-M):N)]
}
## Set scanning range for bifurcation parameter r
my.r <- seq(-2, .25, by=0.0001)
system.time(Orbit <- sapply(my.r, logistic.map,  x=.001^(1/4)
, N=500, M=100))
Orbit <- as.vector(Orbit)
r <- sort(rep(my.r, 101))
#plot(Orbit ~ r, pch=".", ylim=c(-5, 5))
#qplot(y = Orbit, x = r, size = 100)# + geom_point(aes(size = .001))
# png(filename="./orbit2.png",  width=1500, height=1500)
# #data.frame(x = Orbit, y = r)
# xyplot(Orbit ~ r, col = "black", pch = ".", ylim = c(-5,5))
# dev.off()
crit = .001^(.25)
png(filename="./perturbed.png",  width=2000, height=2000)
xyplot(Orbit ~ r, col = "black", pch = ".", cex = 1, ylim = c(-2,2), panel=function(...) {
panel.abline(h=c(crit, - crit))
panel.xyplot(...)
}, scales=list(
x=list(
at=seq(-2, .25, by=0.1)
)))
dev.off()
E
e
math.e
math.E
gauss??
??gauss
plot(exp(-x^2/(50)))
plot(exp(-x^2/(50)))
x=seq(-1,1, by=2/41)
plot(exp(-x^2/(50)))
hist(exp(-x^2/(50)))
bar(exp(-x^2/(50)))
plot(exp(-x^2/(50)))
x=seq(-1,1, by=.0001)
plot(exp(-x^2/(50)))
x=seq(-5,5, by=.01)
plot(exp(-x^2/(50)))
x=seq(-5,5, length.out=41)
plot(exp(-x^2/(50)))
x=seq(-10,10, length.out=41)
plot(exp(-x^2/(50)))
x=seq(-20,20, length.out=41)
plot(exp(-x^2/(50)))
x=seq(-15, 15, length.out=41)
plot(exp(-x^2/(50)))
length(x)
exp(-x^2/(50))
norm(x)
dat <- as.numeric(exp(-x^2/(50)))
norm(dat)
norm(as.matrix(dat))
install.packages("ppls")
library("ppls")
normalize.vector(dat)
dat2 <- normalize.vector(dat)
plot(dat2)
plot(dat2, pch=20)
0.0632456 + c
c
rm(c)
c
f <- function(x, c){return(x^2 + c + .001/x^2)}
f(2,2)
x <- seq(-.0632456, -.147612)
x2 <- x + .0632456
plot(x=x,y=x2)
x
x <- seq(-.0632456, -.147612, length=1000)
x2 <- x + .0632456
plot(x=x,y=x2)
plot(x=x,y=f(x2))
plot(x=x,y=f(x2,x))
plot(x=x,y=f(x2,x), ylim=c(-2,2))
plot(x=x,y=f(x2,x), ylim=c(-.18,.18))
x <- seq( -.147612, -.17278068, length=1000)
x2 <- x + .0632456
plot(x=x,y=f(x2,x), ylim=c(-.18,.18))
plot(x=x,y=f(f(x2,x),x), ylim=c(-.18,.18))
source('~/Dev/R/codings.r')
for (i in 10:20)
{
analyzeN(n = i, paste0("./codings",i,".txt"), codings)
}
codings <- getData()
source('~/Dev/R/codings.r')
View(codings)
codings <- getData()
ncol(codings)
source('~/Dev/R/codings.r')
source('~/Dev/R/codings.r')
codings <- getData()
source('~/Dev/R/codings.r')
codings <- getData()
for (i in 10:20)
{
analyzeN(n = i, paste0("./codings",i,".txt"), codings)
}
for (i in 1:5)
{
analyzeN(n = i, paste0("./codings",i,".txt"), codings)
}
for (i in 10:20)
{
analyzeN(n = i, paste0("./codings",i,".txt"), codings)
}
source('~/Dev/R/codings.r')
View(codings)
View(codings)
source('~/Dev/R/codings.r')
}
source('~/Dev/R/codings.r')
as.factor(c("a", "b"))
ab <- c("a","b")
as <- as.factor(ab)
as
as[[1]]
as[1]
tostring(as[1])
toString(as[1])
source('~/Dev/R/codings.r')
cods <- getData()
View(cods)
cods[1,1]
toString(cods[1,1])
cods[1,1] == "C"
source('~/Dev/R/codings.r')
analyzeN(n = 2, file = "test.txt", cods)
analyzeN(n = 3, file = "test.txt", cods)
source('~/Dev/R/codings.r')
analyzeN(n = 3, file = "test.txt", cods)
source('~/Dev/R/codings.r')
analyzeN(n = 3, file = "test.txt", codings)
source('~/Dev/R/codings.r')
analyzeN(n = 3, file = "test.txt", codings)
source('~/Dev/R/codings.r')
analyzeN(n = 3, file = "test.txt", codings)
source('~/Dev/R/codings.r')
analyzeThroughN(n=20,codings)
source('~/Dev/R/codings.r')
source('~/Dev/R/codings.r')
analyzeN(n = 4,dat=codings)
source('~/Dev/R/codings.r')
analyzeN(n = 4,dat=codings)
source('~/Dev/R/codings.r')
analyzeN(n = 4,dat=codings)
codings <- getData()
View(codings)
write.csv(cods, file="oldcods.csv")
analyzeThroughN(n=20,codings)
analyzeThroughN(n=5,codings)
analyzeN(n=4, file="./cods.txt", codings)
analyzeN(n=4, file="./cods.txt", codings)
analyzeN(n=4, file="./cods.txt", cods)
View(codings)
source('~/Dev/R/codings.r')
analyzeN(n=4, file="./cods.txt", cods)
analyzeN(n=4, file="./cods.txt", codings)
source('~/Dev/R/codings.r')
analyzeN(n=4, file="./cods.txt", codings)
analyzeN(n=4, file="./cods.txt", codings)
codings <- getData()
analyzeN(n=4, file="./cods.txt", codings)
analyzeThroughN(n=10,codings)
source('~/Dev/R/codings.r')
analyzeThroughN(n=10,codings)
source('~/Dev/R/codings.r')
analyzeThroughN(n=10,codings)
